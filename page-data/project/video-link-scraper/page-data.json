{"componentChunkName":"component---src-templates-project-layout-js","path":"/project/video-link-scraper/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Video Link Scraper\",\n  \"mainImage\": \"/video-link-scraper.png\",\n  \"images\": [],\n  \"role\": [\"Full Stack Developer\"],\n  \"technology\": [\"Node\", \"Express\", \"Angular\", \"Google API\", \"PostgreSQL\", \"HTML/CSS\"],\n  \"repo\": \"https://github.com/jcduran05/gyao\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A three day project to help me keep up to date with the shows that I use to watch while living in Japan. By using Google's Custom Search API, I was able to consistenly parse data from multiple websites that I registered as 'custom search engine' through Google's CSE tool.\"), mdx(\"p\", null, \"Initially, I planned on using a scraping library (Cheerio) to get the data that I needed. However, I quickly found out that certain sites will block GET requests if the agent is not a browser. Additionally, it would be too time intensive to create a scraper for each website that I wanted to use as a source. Google's Custom Search came to the rescue to overcome sites that blocked GET requests and it allowed me to focus on building one parser for multiple sources.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"A three day project to help me keep up to date with the shows that I use to watch while living in Japan. By using Google's Custom Search APIâ€¦","fields":{"slug":"/project/video-link-scraper/"},"frontmatter":{"title":"Video Link Scraper","mainImage":"/video-link-scraper.png","images":[],"role":["Full Stack Developer"],"technology":["Node","Express","Angular","Google API","PostgreSQL","HTML/CSS"],"repo":"https://github.com/jcduran05/gyao"}}},"pageContext":{"slug":"/project/video-link-scraper/"}},"staticQueryHashes":["1730116509"]}